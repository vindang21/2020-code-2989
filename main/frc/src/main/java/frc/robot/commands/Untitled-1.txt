package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.util.Color;

import com.revrobotics.ColorSensorV3;
import com.revrobotics.ColorMatchResult;  
import com.revrobotics.ColorMatch;

private final I2C.Port i2cPort = I2C.Port.kOnboard;
  private final ColorSensorV3 m_colorSensor = new ColorSensorV3(i2cPort);
  private final ColorMatch m_colorMatcher = new ColorMatch();
  //these will be used to match up the ccolors when used.
  private final Color kBlueTarget = ColorMatch.makeColor(0.143, 0.427, 0.429);
  private final Color kGreenTarget = ColorMatch.makeColor(0.197, 0.561, 0.240);
  private final Color kRedTarget = ColorMatch.makeColor(0.561, 0.232, 0.114);
  private final Color kYellowTarget = ColorMatch.makeColor(0.361, 0.524, 0.113); 

 Color detectedColor = m_colorSensor.getColor();
 ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);
[] = not real, a placeholder

if([a button pressed]){
    while(match.color!=[kGreenTarget]){
     [run motor at low speed, 1 second];
        Color detectedColor = m_colorSensor.getColor();
        ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);
    }
}
if([b button pressed]){
    while(match.color!=[kRedTarget]){
        [run motor at low speed, 1 second]
        Color detectedColor = m_colorSensor.getColor();
        ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);
    }
}
if([x button pressed]){
    while(match.color!=[kBlueTarget]){
        [run motor at low speed, 1 second]
        Color detectedColor = m_colorSensor.getColor();
        ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);
    }
}
if([y button pressed]){
    while(match.color!=[kYellowTarget]){
        [run motor at low speed, 1 second]
        Color detectedColor = m_colorSensor.getColor();
        ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);
    }
}


//put motor in robot map, port (?)
//The motor for the color wheel should spin in burts with small power, about halfway throuh one section on the wheel
//Then it will check if te color is what is needed, and will continue spinning if not found
//Should it be changed so that it uses booleans and an if statement in order to function?

   